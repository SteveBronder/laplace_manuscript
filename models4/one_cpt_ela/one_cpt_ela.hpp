
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace one_cpt_ela_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 86> locations_array__ = 
{" (found before start of program)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 87, column 2 to column 24)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 88, column 2 to column 26)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 89, column 2 to column 26)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 90, column 2 to column 15)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 91, column 2 to column 15)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 97, column 2 to column 48)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 98, column 2 to column 55)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 103, column 2 to column 23)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 104, column 2 to column 25)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 105, column 2 to column 25)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 106, column 2 to column 27)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 107, column 2 to column 27)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 110, column 2 to line 114, column 81)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 54, column 2 to column 8)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 55, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 55, column 2 to column 18)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 56, column 9 to column 10)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 56, column 2 to column 17)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 57, column 2 to column 17)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 58, column 34 to column 44)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 58, column 2 to column 46)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 59, column 32 to column 42)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 59, column 2 to column 44)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 61, column 2 to column 21)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 65, column 2 to column 27)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 66, column 9 to column 23)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 66, column 2 to column 64)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 67, column 2 to column 18)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 68, column 2 to column 27)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 69, column 2 to column 29)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 70, column 2 to column 17)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 71, column 16 to column 34)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 71, column 2 to column 36)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 72, column 9 to column 18)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 72, column 2 to column 26)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 74, column 2 to column 28)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 75, column 2 to column 19)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 76, column 2 to column 40)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 77, column 2 to column 57)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 79, column 2 to column 21)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 80, column 2 to column 32)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 81, column 2 to column 24)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 82, column 2 to column 34)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 4, column 6 to column 38)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 5, column 6 to column 38)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 6, column 6 to column 36)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 7, column 13 to column 27)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 7, column 6 to column 35)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 8, column 6 to column 18)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 9, column 6 to column 18)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 12, column 8 to column 34)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 13, column 8 to column 24)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 14, column 8 to column 41)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 15, column 8 to column 41)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 11, column 30 to line 16, column 7)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 11, column 6 to line 16, column 7)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 18, column 6 to column 32)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 3, column 68 to line 19, column 5)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 22, column 6 to column 36)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 23, column 6 to column 27)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 24, column 16 to column 26)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 24, column 6 to column 60)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 25, column 14 to column 24)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 25, column 6 to column 77)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 26, column 13 to column 14)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 26, column 6 to column 35)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 27, column 13 to column 14)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 27, column 6 to column 46)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 28, column 6 to column 33)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 29, column 6 to column 15)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 30, column 6 to column 15)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 31, column 6 to column 28)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 32, column 6 to column 28)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 33, column 6 to column 26)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 35, column 13 to column 14)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 35, column 6 to column 18)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 39, column 10 to column 49)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 40, column 10 to column 39)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 43, column 10 to line 44, column 60)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 38, column 35 to line 45, column 9)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 38, column 8 to line 45, column 9)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 37, column 30 to line 46, column 7)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 37, column 6 to line 46, column 7)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 48, column 4 to column 41)",
 " (in '/home/steve/stan/stevebronder/laplace_manuscript/models4/one_cpt_ela/one_cpt_ela.stan', line 21, column 70 to line 49, column 3)"};

struct K_f_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_eigen_matrix_dynamic_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>>, -1, -1>
  operator()(const T0__& phi, const T1__& x, const T2__& delta,
             const std::vector<int>& delta_int, std::ostream* pstream__) const;
};
struct L_f_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>>
  operator()(const T0__& theta, const T1__& eta, const T2__& delta,
             const std::vector<int>& delta_int, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_eigen_matrix_dynamic_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>>, -1, -1>
  K_f(const T0__& phi_arg__, const T1__& x_arg__, const T2__& delta_arg__,
      const std::vector<int>& delta_int, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& phi = stan::math::to_ref(phi_arg__);
    const auto& x = stan::math::to_ref(x_arg__);
    const auto& delta = stan::math::to_ref(delta_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ sigma_0_squared = DUMMY_VAR__;
      current_statement__ = 44;
      sigma_0_squared = stan::math::pow(
                          stan::model::rvalue(phi, "phi",
                            stan::model::index_uni(1)), 2);
      local_scalar_t__ sigma_1_squared = DUMMY_VAR__;
      current_statement__ = 45;
      sigma_1_squared = stan::math::pow(
                          stan::model::rvalue(phi, "phi",
                            stan::model::index_uni(2)), 2);
      int n_patients = std::numeric_limits<int>::min();
      current_statement__ = 46;
      n_patients = stan::model::rvalue(delta_int, "delta_int",
                     stan::model::index_uni(1));
      current_statement__ = 47;
      stan::math::validate_non_negative_index("K_vec", "2 * n_patients",
                                              (2 * n_patients));
      Eigen::Matrix<local_scalar_t__, -1, 1> K_vec =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant((2 * n_patients),
           DUMMY_VAR__);
      int index_0 = std::numeric_limits<int>::min();
      int index_1 = std::numeric_limits<int>::min();
      current_statement__ = 56;
      for (int i = 1; i <= n_patients; ++i) {
        current_statement__ = 51;
        index_0 = ((2 * (i - 1)) + 1);
        current_statement__ = 52;
        index_1 = (2 * i);
        current_statement__ = 53;
        stan::model::assign(K_vec, sigma_0_squared,
          "assigning variable K_vec", stan::model::index_uni(index_0));
        current_statement__ = 54;
        stan::model::assign(K_vec, sigma_1_squared,
          "assigning variable K_vec", stan::model::index_uni(index_1));
      }
      current_statement__ = 57;
      return stan::math::diag_matrix(K_vec);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr>
  stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>>
  L_f(const T0__& theta_arg__, const T1__& eta_arg__,
      const T2__& delta_arg__, const std::vector<int>& delta_int,
      std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& theta = stan::math::to_ref(theta_arg__);
    const auto& eta = stan::math::to_ref(eta_arg__);
    const auto& delta = stan::math::to_ref(delta_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int n_patients = std::numeric_limits<int>::min();
      current_statement__ = 59;
      n_patients = stan::model::rvalue(delta_int, "delta_int",
                     stan::model::index_uni(1));
      int N = std::numeric_limits<int>::min();
      current_statement__ = 60;
      N = stan::model::rvalue(delta_int, "delta_int",
            stan::model::index_uni(2));
      current_statement__ = 61;
      stan::math::validate_non_negative_index("start", "n_patients",
                                              n_patients);
      std::vector<int> start =
         std::vector<int>(n_patients, std::numeric_limits<int>::min());
      current_statement__ = 62;
      stan::model::assign(start,
        stan::model::rvalue(delta_int, "delta_int",
          stan::model::index_min_max(3, (n_patients + 2))),
        "assigning variable start");
      current_statement__ = 63;
      stan::math::validate_non_negative_index("end", "n_patients", n_patients);
      std::vector<int> end =
         std::vector<int>(n_patients, std::numeric_limits<int>::min());
      current_statement__ = 64;
      stan::model::assign(end,
        stan::model::rvalue(delta_int, "delta_int",
          stan::model::index_min_max((n_patients + 3), ((2 * n_patients) + 2))),
        "assigning variable end");
      current_statement__ = 65;
      stan::math::validate_non_negative_index("y_obs", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> y_obs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 66;
      stan::model::assign(y_obs,
        stan::model::rvalue(delta, "delta", stan::model::index_min_max(1, N)),
        "assigning variable y_obs");
      current_statement__ = 67;
      stan::math::validate_non_negative_index("time", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> time =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 68;
      stan::model::assign(time,
        stan::model::rvalue(delta, "delta",
          stan::model::index_min_max((N + 1), (2 * N))),
        "assigning variable time");
      local_scalar_t__ y0 = DUMMY_VAR__;
      current_statement__ = 69;
      y0 = stan::model::rvalue(delta, "delta",
             stan::model::index_uni(((2 * N) + 1)));
      local_scalar_t__ k_0 = DUMMY_VAR__;
      local_scalar_t__ k_1 = DUMMY_VAR__;
      local_scalar_t__ k_0_pop = DUMMY_VAR__;
      current_statement__ = 72;
      k_0_pop = stan::model::rvalue(eta, "eta", stan::model::index_uni(1));
      local_scalar_t__ k_1_pop = DUMMY_VAR__;
      current_statement__ = 73;
      k_1_pop = stan::model::rvalue(eta, "eta", stan::model::index_uni(2));
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 74;
      sigma = stan::model::rvalue(eta, "eta", stan::model::index_uni(3));
      current_statement__ = 75;
      stan::math::validate_non_negative_index("y", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> y =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 83;
      for (int i = 1; i <= n_patients; ++i) {
        current_statement__ = 81;
        for (int j = stan::model::rvalue(start, "start",
                       stan::model::index_uni(i));
             j <= stan::model::rvalue(end, "end", stan::model::index_uni(i));
             ++j) {
          current_statement__ = 77;
          k_0 = (stan::model::rvalue(theta, "theta",
                   stan::model::index_uni(((2 * (i - 1)) + 1))) + k_0_pop);
          current_statement__ = 78;
          k_1 = (stan::model::rvalue(theta, "theta",
                   stan::model::index_uni((2 * i))) + k_1_pop);
          current_statement__ = 79;
          stan::model::assign(y,
            (((y0 / (k_0 - k_1)) * k_1) *
              (stan::math::exp(
                 (-k_1 *
                   stan::model::rvalue(time, "time",
                     stan::model::index_uni(j)))) -
                stan::math::exp(
                  (-k_0 *
                    stan::model::rvalue(time, "time",
                      stan::model::index_uni(j)))))),
            "assigning variable y", stan::model::index_uni(j));
        }
      }
      current_statement__ = 84;
      return stan::math::normal_lpdf<false>(y_obs, y, sigma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>*,
          stan::require_eigen_matrix_dynamic_t<T1__>*,
          stan::require_col_vector_t<T2__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>>, -1, -1>
K_f_functor__::operator()(const T0__& phi, const T1__& x, const T2__& delta,
                          const std::vector<int>& delta_int,
                          std::ostream* pstream__)  const
{
  return K_f(phi, x, delta, delta_int, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*>
stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>>
L_f_functor__::operator()(const T0__& theta, const T1__& eta,
                          const T2__& delta,
                          const std::vector<int>& delta_int,
                          std::ostream* pstream__)  const
{
  return L_f(theta, eta, delta, delta_int, pstream__);
}

 class one_cpt_ela_model final : public model_base_crtp<one_cpt_ela_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> y_obs__;
  Eigen::Matrix<double, -1, 1> time__;
  int n_patients;
  std::vector<int> start;
  std::vector<int> end;
  double y0;
  Eigen::Matrix<double, -1, -1> x_mat_dummy__;
  Eigen::Matrix<double, -1, 1> theta0__;
  double tol;
  int max_num_steps;
  int hessian_block_size;
  int solver;
  std::vector<int> delta_int;
  Eigen::Matrix<double, -1, 1> delta__;
  int max_steps_line_search; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> y_obs{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> time{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> x_mat_dummy{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> theta0{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> delta{nullptr, 0};
 
 public:
  ~one_cpt_ela_model() { }
  
  inline std::string model_name() const final { return "one_cpt_ela_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = %%NAME%%3 %%VERSION%%", "stancflags = "};
  }
  
  
  one_cpt_ela_model(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "one_cpt_ela_model_namespace::one_cpt_ela_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 14;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 14;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 15;
      stan::math::validate_non_negative_index("y_obs", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization","y_obs","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      y_obs__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&y_obs) Eigen::Map<Eigen::Matrix<double, -1, 1>>(y_obs__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> y_obs_flat__;
        current_statement__ = 16;
        y_obs_flat__ = context__.vals_r("y_obs");
        current_statement__ = 16;
        pos__ = 1;
        current_statement__ = 16;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          stan::model::assign(y_obs, y_obs_flat__[(pos__ - 1)],
            "assigning variable y_obs", stan::model::index_uni(sym1__));
          current_statement__ = 16;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 17;
      stan::math::validate_non_negative_index("time", "N", N);
      current_statement__ = 18;
      context__.validate_dims("data initialization","time","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      time__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&time) Eigen::Map<Eigen::Matrix<double, -1, 1>>(time__.data(), N);
      
      {
        std::vector<local_scalar_t__> time_flat__;
        current_statement__ = 18;
        time_flat__ = context__.vals_r("time");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 18;
          stan::model::assign(time, time_flat__[(pos__ - 1)],
            "assigning variable time", stan::model::index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      context__.validate_dims("data initialization","n_patients","int",
           std::vector<size_t>{});
      n_patients = std::numeric_limits<int>::min();
      
      
      current_statement__ = 19;
      n_patients = context__.vals_i("n_patients")[(1 - 1)];
      current_statement__ = 20;
      stan::math::validate_non_negative_index("start", "n_patients",
                                              n_patients);
      current_statement__ = 21;
      context__.validate_dims("data initialization","start","int",
           std::vector<size_t>{static_cast<size_t>(n_patients)});
      start = std::vector<int>(n_patients, std::numeric_limits<int>::min());
      
      
      current_statement__ = 21;
      start = context__.vals_i("start");
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "start", start, 1);
      current_statement__ = 21;
      stan::math::check_less_or_equal(function__, "start", start, N);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("end", "n_patients", n_patients);
      current_statement__ = 23;
      context__.validate_dims("data initialization","end","int",
           std::vector<size_t>{static_cast<size_t>(n_patients)});
      end = std::vector<int>(n_patients, std::numeric_limits<int>::min());
      
      
      current_statement__ = 23;
      end = context__.vals_i("end");
      current_statement__ = 23;
      stan::math::check_greater_or_equal(function__, "end", end, 1);
      current_statement__ = 23;
      stan::math::check_less_or_equal(function__, "end", end, N);
      current_statement__ = 24;
      context__.validate_dims("data initialization","y0","double",
           std::vector<size_t>{});
      y0 = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 24;
      y0 = context__.vals_r("y0")[(1 - 1)];
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "y0", y0, 0);
      current_statement__ = 25;
      x_mat_dummy__ = 
        Eigen::Matrix<double, -1, -1>::Constant(0, 0,
          std::numeric_limits<double>::quiet_NaN());
      new (&x_mat_dummy) Eigen::Map<Eigen::Matrix<double, -1, -1>>(x_mat_dummy__.data(), 0, 0);
        
      
      current_statement__ = 26;
      stan::math::validate_non_negative_index("theta0", "2 * n_patients",
                                              (2 * n_patients));
      current_statement__ = 27;
      theta0__ = 
        Eigen::Matrix<double, -1, 1>::Constant((2 * n_patients),
          std::numeric_limits<double>::quiet_NaN());
      new (&theta0) Eigen::Map<Eigen::Matrix<double, -1, 1>>(theta0__.data(), 
        (2 * n_patients));
      
      current_statement__ = 27;
      stan::model::assign(theta0,
        stan::math::rep_vector(0, (2 * n_patients)),
        "assigning variable theta0");
      current_statement__ = 28;
      tol = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 28;
      tol = 1e-3;
      current_statement__ = 29;
      max_num_steps = std::numeric_limits<int>::min();
      
      
      current_statement__ = 29;
      max_num_steps = 1000;
      current_statement__ = 30;
      hessian_block_size = std::numeric_limits<int>::min();
      
      
      current_statement__ = 30;
      hessian_block_size = 2;
      current_statement__ = 31;
      solver = std::numeric_limits<int>::min();
      
      
      current_statement__ = 31;
      solver = 2;
      current_statement__ = 32;
      stan::math::validate_non_negative_index("delta_int",
                                              "2 * n_patients + 4",
                                              ((2 * n_patients) + 4));
      current_statement__ = 33;
      delta_int = 
        std::vector<int>(((2 * n_patients) + 4), 
          std::numeric_limits<int>::min());
      
      
      current_statement__ = 34;
      stan::math::validate_non_negative_index("delta", "2 * N + 1",
                                              ((2 * N) + 1));
      current_statement__ = 35;
      delta__ = 
        Eigen::Matrix<double, -1, 1>::Constant(((2 * N) + 1),
          std::numeric_limits<double>::quiet_NaN());
      new (&delta) Eigen::Map<Eigen::Matrix<double, -1, 1>>(delta__.data(), 
        ((2 * N) + 1));
      
      current_statement__ = 36;
      stan::model::assign(delta_int, n_patients,
        "assigning variable delta_int", stan::model::index_uni(1));
      current_statement__ = 37;
      stan::model::assign(delta_int, N,
        "assigning variable delta_int", stan::model::index_uni(2));
      current_statement__ = 38;
      stan::model::assign(delta_int, start,
        "assigning variable delta_int", stan::model::index_min_max(3, 
                                          (n_patients + 2)));
      current_statement__ = 39;
      stan::model::assign(delta_int, end,
        "assigning variable delta_int", stan::model::index_min_max((n_patients
                                                                    + 3), 
                                          ((2 * n_patients) + 2)));
      current_statement__ = 40;
      stan::model::assign(delta, y_obs,
        "assigning variable delta", stan::model::index_min_max(1, N));
      current_statement__ = 41;
      stan::model::assign(delta, time,
        "assigning variable delta", stan::model::index_min_max((N + 1), 
                                      (2 * N)));
      current_statement__ = 42;
      stan::model::assign(delta, y0,
        "assigning variable delta", stan::model::index_uni(((2 * N) + 1)));
      current_statement__ = 43;
      max_steps_line_search = std::numeric_limits<int>::min();
      
      
      current_statement__ = 43;
      max_steps_line_search = 100;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "one_cpt_ela_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      local_scalar_t__ sigma = DUMMY_VAR__;
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      local_scalar_t__ sigma_0 = DUMMY_VAR__;
      current_statement__ = 2;
      sigma_0 = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ sigma_1 = DUMMY_VAR__;
      current_statement__ = 3;
      sigma_1 = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      local_scalar_t__ k_0_pop = DUMMY_VAR__;
      current_statement__ = 4;
      k_0_pop = in__.template read<local_scalar_t__>();
      local_scalar_t__ k_1_pop = DUMMY_VAR__;
      current_statement__ = 5;
      k_1_pop = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__, -1, 1> phi =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(2, DUMMY_VAR__);
      current_statement__ = 6;
      stan::model::assign(phi,
        stan::math::to_vector(std::vector<local_scalar_t__>{sigma_0,
          sigma_1}), "assigning variable phi");
      Eigen::Matrix<local_scalar_t__, -1, 1> eta =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(3, DUMMY_VAR__);
      current_statement__ = 7;
      stan::model::assign(eta,
        stan::math::to_vector(std::vector<local_scalar_t__>{k_0_pop, k_1_pop,
          sigma}), "assigning variable eta");
      {
        current_statement__ = 8;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma, 0, 1));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_0, 0, 1));
        current_statement__ = 10;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(sigma_1, 0, 1));
        current_statement__ = 11;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(k_0_pop, 2, 0.1));
        current_statement__ = 12;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(k_1_pop, 1, 0.1));
        current_statement__ = 13;
        lp_accum__.add(
          stan::math::laplace_marginal_tol_lpdf(delta, L_f_functor__(),
            pstream__, eta, delta_int, tol, max_num_steps,
            hessian_block_size, solver, max_steps_line_search, theta0,
            K_f_functor__(), phi, x_mat_dummy, stan::math::to_vector(delta),
            delta_int));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "one_cpt_ela_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      double sigma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      sigma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      double sigma_0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      sigma_0 = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double sigma_1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      sigma_1 = in__.template read_constrain_lb<local_scalar_t__, 
                  jacobian__>(0, lp__);
      double k_0_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      k_0_pop = in__.template read<local_scalar_t__>();
      double k_1_pop = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      k_1_pop = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double, -1, 1> phi =
         Eigen::Matrix<double, -1, 1>::Constant(2,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> eta =
         Eigen::Matrix<double, -1, 1>::Constant(3,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(sigma);
      out__.write(sigma_0);
      out__.write(sigma_1);
      out__.write(k_0_pop);
      out__.write(k_1_pop);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 6;
      stan::model::assign(phi,
        stan::math::to_vector(std::vector<local_scalar_t__>{sigma_0,
          sigma_1}), "assigning variable phi");
      current_statement__ = 7;
      stan::model::assign(eta,
        stan::math::to_vector(std::vector<local_scalar_t__>{k_0_pop, k_1_pop,
          sigma}), "assigning variable eta");
      if (emit_transformed_parameters__) {
        out__.write(phi);
        out__.write(eta);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ sigma = DUMMY_VAR__;
      sigma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma);
      local_scalar_t__ sigma_0 = DUMMY_VAR__;
      sigma_0 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_0);
      local_scalar_t__ sigma_1 = DUMMY_VAR__;
      sigma_1 = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sigma_1);
      local_scalar_t__ k_0_pop = DUMMY_VAR__;
      k_0_pop = in__.read<local_scalar_t__>();
      out__.write(k_0_pop);
      local_scalar_t__ k_1_pop = DUMMY_VAR__;
      k_1_pop = in__.read<local_scalar_t__>();
      out__.write(k_1_pop);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"sigma", "sigma_0", "sigma_1",
      "k_0_pop", "k_1_pop", "phi", "eta"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(2)},
      std::vector<size_t>{static_cast<size_t>(3)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigma_0");
    param_names__.emplace_back(std::string() + "sigma_1");
    param_names__.emplace_back(std::string() + "k_0_pop");
    param_names__.emplace_back(std::string() + "k_1_pop");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "sigma");
    param_names__.emplace_back(std::string() + "sigma_0");
    param_names__.emplace_back(std::string() + "sigma_1");
    param_names__.emplace_back(std::string() + "k_0_pop");
    param_names__.emplace_back(std::string() + "k_1_pop");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "phi" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= 3; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k_0_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k_1_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"sigma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k_0_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k_1_pop\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(2) + "},\"block\":\"transformed_parameters\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(3) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = (2 + 3);
      const size_t num_gen_quantities = 0;
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((1 + 1) + 1) + 1) + 1);
      const size_t num_transformed = (2 + 3);
      const size_t num_gen_quantities = 0;
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 5> names__{"sigma", "sigma_0",
      "sigma_1", "k_0_pop", "k_1_pop"};
      const std::array<Eigen::Index, 5> constrain_param_sizes__{1, 1, 
       1, 1, 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = one_cpt_ela_model_namespace::one_cpt_ela_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return one_cpt_ela_model_namespace::profiles__;
}

#endif


